<script>
    const MAX_PRICE = {{ maxPrice }},
        MIN_PRICE = {{ minPrice }};

    const NEW_SORT = '', POPULAR_SORT = 2, CHEAPER_SORT = 3, EXPENSIVE_SORT = 4;

    const COLOR_TYPE = 1, BUTTON_TYPE = 2;
    let selectableClasses = {
        [COLOR_TYPE]: {
            selected: "color-selected",
            selectable: "color-selectable",
        },
        [BUTTON_TYPE]: {
            selected: "btn-selected",
            selectable: "btn-selectable"
        }
    };

    class Filter {
        constructor({
                        typeEnginesSelected = [],
                        country = '',
                        stamp = '',
                        model = '',
                        minYear = 0,
                        maxYear = 0,
                        minPrice = MIN_PRICE,
                        maxPrice = MAX_PRICE,
                        page = 1,
                        limit = 12,
                        sortType = NEW_SORT,
                        text = '',
                    }) {
            this.typeEnginesSelected = typeEnginesSelected;
            this.country = country;
            this.stamp = stamp;
            this.model = model;
            this.minYear = minYear;
            this.maxYear = maxYear;
            this.minPrice = minPrice;
            this.maxPrice = maxPrice;
            this.page = page;
            this.limit = limit;
            this.sortType = sortType;
            this.text = text;
        }
    }

    const filter = new Filter({});

    document.addEventListener("DOMContentLoaded", async () => {
        addFilterSelectWithTimeout('.filter-search', 'text')

        addFilterSelect('#country', 'country')
        addFilterSelect('#model', 'model')
        addFilterSelect('#stamp', 'stamp')

        addMinValueInput('minYear', 'maxYear')
        addMaxValueInput('maxYear', 'minYear')

        addMinValueInput('minPrice', 'maxPrice')
        addMaxValueInput('maxPrice', 'minPrice')

        prepareFilter()

        await setCarsCard(filter);
    });

    /** @param {Filter} filter
     * @param {boolean} isAddPage
     */
    async function setCarsCard(filter, isAddPage = false) {
        let carsCardsDiv = document.querySelector(".cars-cards"), html = '';
        if (isAddPage) {
            filter.page++;
        }
        let data = await Car.fetchCars(
            CATALOGUE,
            {
                type: filter.typeEnginesSelected.join(),
                country: filter.country,
                stamp: filter.stamp,
                model: filter.model,
                minPrice: filter.minPrice,
                maxPrice: filter.maxPrice,
                maxYear: filter.maxYear,
                minYear: filter.minYear,
                page: filter.page,
                limit: filter.limit,
                sort: filter.sortType,
                text: filter.text,
            }
        );
        for (let car of data.data) {
            html += car.createHtmlForCarCard();
        }
        if (isAddPage) {
            carsCardsDiv.innerHTML += html;
        } else {
            carsCardsDiv.innerHTML = html;
        }
        formatAllNumber();
        setButtonMoreCars(data.pageCount > filter.page);
    }

    function setView(el) {
        if (el && !el.classList.contains('btn-icon-active')) {
            for (let item of document.querySelectorAll('.btn-icon')) {
                item.classList.remove('btn-icon-active')
            }

            el.classList.add('btn-icon-active')

            let list = document.querySelector('.cars-cards')

            list.classList.toggle('grid-col-car')
            list.classList.toggle('grid-car')

            localStorage.setItem('view', el.getAttribute('id'))
        }
    }

    function setSort(el, type) {
        filter.sortType = type

        for (let item of document.querySelectorAll('.btn-sort-active')) {
            item.classList.remove('btn-sort-active')
            item.classList.add('btn-sort')

        }

        el.classList.add('btn-sort-active')
        filter.page = 1
        setCarsCard(filter)
    }

    function setMobileInput({mobileElement, maxValue, filterKeyName, symbol}) {
        let mask = IMask(mobileElement, {
            mask: `num ${symbol}`,
            blocks: {
                num: {
                    mask: Number,
                    thousandsSeparator: ' ',
                    min: 0,
                    max: maxValue,
                }
            }
        });
        mask.on('accept', () => {
            filter[filterKeyName].max = mask.unmaskedValue;
            filter[filterKeyName].min = 0;
            setCarsCard(filter);
        });
    }

    function resetElementTypes() {
        for (let item of document.querySelectorAll('.filter-engine')) {
            item.classList.remove('btn-selected')
            item.classList.add('btn-select')
        }
        document.querySelector('.btn-all').classList.add(selectableClasses[BUTTON_TYPE].selected)
        filter.typeEnginesSelected = []
        filter.page = 1
        setCarsCard(filter)
    }

    function elementSelectable(el, type, funcAfterSelected) {
        let selectableClass = selectableClasses[type];
        el.classList.toggle(selectableClass.selected);
        el.classList.toggle(selectableClass.selectable);

        funcAfterSelected();

        if (filter.typeEnginesSelected.length > 0) {
            document.querySelector('.btn-all').classList.remove(selectableClass.selected)
        } else if (filter.typeEnginesSelected.length === 0) {
            document.querySelector('.btn-all').classList.add(selectableClass.selected)
        }
    }

    function toggleFilters() {
        let filters = document.querySelector(".view-filters");
        let display = filters.style.display;
        if (display === "none" || display === "") {
            filters.style.display = "block";
            document.querySelector(".close-filter").classList.toggle('d-none');
            document.querySelector('.toggle-filter-img').classList.toggle('invert-img');
        } else {
            document.querySelector('.toggle-filter-img').classList.toggle('invert-img');
            document.querySelector(".close-filter").classList.toggle('d-none');
            filters.style.display = "none";
        }
    }

    function setTypeEngine() {
        let collectionEngineFilters = document.getElementsByClassName('filter-engine');
        for (let engineFilter of collectionEngineFilters) {
            let filterIndex = filter.typeEnginesSelected.findIndex(el => el === engineFilter.value);
            if (engineFilter.classList.contains(selectableClasses[BUTTON_TYPE].selected) && filterIndex === -1) {
                filter.typeEnginesSelected.push(engineFilter.value);
            } else if (filterIndex !== -1 && engineFilter.classList.contains(selectableClasses[BUTTON_TYPE].selectable)) {
                filter.typeEnginesSelected.splice(filterIndex, 1);
            }
        }
        filter.page = 1
        setCarsCard(filter);
    }

    async function setCountry(value) {
        filter.country = value;
        filter.page = 1;
        await setCarsCard(filter);
    }

    function setButtonMoreCars(value) {
        if (value) {
            document.getElementById('load-cars-card').classList.remove('d-none');
        } else {
            document.getElementById('load-cars-card').classList.add('d-none');
        }
    }

    function getMultiRangeValueByValues(values) {
        return {
            min: parseInt(values[0]),
            max: parseInt(values[1])
        };
    }

    function setLoading(isLoad) {
        if (isLoad) {
            document.getElementById('loader').classList.remove('d-none')
        } else {
            document.getElementById('loader').classList.add('d-none')
        }
    }

    function addMinValueInput(min, max) {
        addNumberInput(min, (el, index) => {
            let maxPrice = document.querySelector('#' + max)
            if (maxPrice && parseInt(maxPrice.value) < parseInt(el.value)) {
                maxPrice.value = el.value
            }
            filter[index] = el.value
            filter.page = 1;
            setCarsCard(filter)
        })
    }

    function addMaxValueInput(max, min) {
        addNumberInput(max, (el, index) => {
            let minPrice = document.querySelector(`#${min}`)
            if (minPrice && parseInt(minPrice.value) > parseInt(el.value)) {
                minPrice.value = el.value
            }
            filter[index] = el.value
            filter.page = 1;
            setCarsCard(filter)
        })
    }

    function addFilterSelectWithTimeout(el, index, typeListener = 'input', timeout = 0.75) {
        let timeoutId;

        let doc = document.querySelector(el)
        doc.addEventListener(typeListener, () => {
            clearTimeout(timeoutId);

            filter[index] = doc.value
            filter.page = 1;
            timeoutId = setTimeout(() => setCarsCard(filter), timeout * 1000);
        });
    }

    function addFilterSelect(el, index, typeClick = 'change') {
        let doc = document.querySelector(el);
        doc.addEventListener(typeClick, (e) => {
            filter[index] = doc.value;
            filter.page = 1;
            setCarsCard(filter)
        });
    }

    function prepareFilter() {
        const keys = Object.keys(filter);
        const params = getQueryParams()

        for (const param of params) {
            if (param.name === 'engine') {
                const el = document.querySelector(`.car-type-${param.value}`)
                if (!el) {
                    continue;
                }
                filter.typeEnginesSelected.push(param.value)
                elementSelectable(el, BUTTON_TYPE, setTypeEngine)
                continue;
            }

            if (keys.includes(param.name)) {
                const element = document.querySelector(`#${param.name}`)
                if (!element) {
                    continue;
                }
                filter[param.name] = param.value
                element.value = param.value
            }
        }


    }
</script>